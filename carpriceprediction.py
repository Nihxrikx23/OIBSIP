# -*- coding: utf-8 -*-
"""CarPricePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17OrrwuGIog9ILp8swd29uggX7Ja-qyXC

**NAME:** Niharika Choudhari

**DOMAIN:** Data Science

**TASK:** Car Price Prediction using Python and Machine Learning

**COMPANY:** Oasis Infobyte

**BATCH:** April 2023
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/CarPrice.csv')

#Columns of the dataset
df.columns

#first 10 rows of the datset
df.head(10)

#check for null values in the dataset
df.isnull().sum()

#Displaying the statistic measures of dataset
df.describe()

#Number of unique values in the CarName column of dataset
df['CarName'].unique()

#Distribution of price of cars across the dataset
sns.set_style('whitegrid')
plt.figure(figsize=(9,5))
sns.displot(df.price)
plt.show()

#Finding the correlation between the features of dataset
df.corr()

#Plotting a Heatmap to show the correlation between the features of dataset
plt.figure(figsize=(14,11))
sns.heatmap(df.corr(), cmap = 'coolwarm', annot = True)
plt.show()

#Training the Car Price Prediction Model using Decision Tree Algorithm
predict = "price"
data = df[["symboling", "wheelbase", "carlength", "carwidth", "carheight", "curbweight", "enginesize", "boreratio", "stroke", "compressionratio", "horsepower",
           "peakrpm", "citympg", "highwaympg", "price"]]
x = np.array(data.drop([predict], 1))
y = np.array(data[predict])

#importing the library to perform training and testing
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size = 0.2)

#using the Decision Tree Algorithm 
from sklearn.tree import DecisionTreeRegressor
model = DecisionTreeRegressor()
model.fit(xtrain,ytrain)
predictions = model.predict(xtest)

#Predicting the score
from sklearn.metrics import mean_absolute_error
print("Accuracy: ",model.score(xtest, predictions))

"""The model uses The **Decision Tree Algorithm** which is a supervised Machine Learning Algorithm. With the help of decision tree algorithm, we are predicting the car price. 

This model gives **100% accuracy** which is excellent.
"""