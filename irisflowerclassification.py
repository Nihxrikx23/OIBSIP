# -*- coding: utf-8 -*-
"""IrisFlowerClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HRkH-fV2u71SP7WDeGiZHmxWeqFcdSC2

**NAME:** Niharika Choudhari

**DOMAIN:** Data Science

**TASK:** Iris Flower Classification using Python and Machine Learning

**COMPANY:** Oasis Infobyte

**BATCH:** April 2023
"""

from google.colab import drive
drive.mount('/content/drive')

#Import all the necessary libraries
import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
import warnings
warnings.simplefilter("ignore")

#Load the IRIS Dataset
iris = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Iris[1].csv')

#Columns of the dataset
iris.columns

#Information regarding the type of data in the columns
iris.info()

#Check for null values in the dataset
iris.isnull().sum()

#Count the number of species of the iris flower
iris['Species'].value_counts()

#Visualizing the Species
plt.figure(figsize=(6,4))
sns.countplot(x ='Species', data = iris, palette = 'Paired')
plt.show()

#Visualizing the dataset for comparing different features
sns.pairplot(iris, hue = 'Species', palette = 'dark')
plt.show()

#Import the library to perfrom Logistic Regression for Classification
from sklearn.linear_model import LogisticRegression 
from sklearn.model_selection import train_test_split
from sklearn import metrics

#Split the training and testing datasets
train, test = train_test_split(iris, test_size = 0.25)
print(train.shape)
print(test.shape)

#Training and Testing datasets
train_X = train[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]
train_y = train.Species

test_X = test[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]
test_y = test.Species

train_X.head()

test_y.head()

#Using LogisticRegression to classify the Iris Dataset
model = LogisticRegression()
model.fit(train_X, train_y)
prediction = model.predict(test_X)
print('Accuracy:',metrics.accuracy_score(prediction,test_y))

"""The **Accuracy** of the model has come out to be **94.73%** which is a good accuracy."""